img = niftiarr(temp, img)
img = cal_img(img)
mask.overlay(temp, img)
dev.off()
symm.img = lr_symm(img)
symm.ind = which(symm.img > 0)
rr = rowMeans(runmat[, ind, drop=FALSE])
demog[, paste0("pct")] = rr
all.rr = colMeans(xmat[symm.ind, , drop=FALSE])
xdemog[, paste0("pct")] = all.rr
sub = xdemog[ all.rr == 0, ]
dim(mat)
#################################
# Regressions with % of ROI
# Author: John Muschelli
#################################
rm(list=ls())
library(cttools)
library(scales)
library(RColorBrewer)
library(data.table)
library(ggplot2)
library(grid)
library(plyr)
library(fslr)
homedir = "/Applications"
rootdir = "~/CT_Registration"
basedir = file.path(rootdir, "data")
outdir = basedir
if (Sys.info()[["user"]] %in% "jmuschel") {
homedir = "~"
rootdir = "/dexter/disk2/smart/stroke_ct/ident"
basedir = file.path(rootdir, "Registration")
outdir = file.path(basedir, "results")
}
progdir = file.path(rootdir, "programs")
tempdir = file.path(rootdir, "Template")
atlasdir = file.path(tempdir, "atlases")
lr_symm = function(img){
dimg = dim(img)
max.slice = dimg[1]
mid.slice = (max.slice+1)/2
w = which(img > 0, arr.ind=TRUE)
## 20 - then 160, 90 - 20 + 90
## if 160 then 90 - 160 + 90
w[, 1] = 2 * mid.slice - w[,1]
w = w[ w[, 1] > 0 & w[, 1] < max.slice, ]
img[w] = 1
img = (img > 0)*1
img = newnii(img)
}
# allres = allres
make.pvalimg = function(pvalimg, runlist = lists){
pvalimg.tab = llply(runlist, function(x) {
x = area_pct(pvalimg, ind.list=x, keepall=TRUE)
x$nvox = x$nvox/sum(x$nvox) * 100
x$roi_pct_any = x$roi_pct_any * 100
x$roi_mean_pct = x$roi_mean_pct * 100
x = x[order(x$nvox, decreasing=TRUE), , drop=FALSE]
x$area = rownames(x)
x
}, .progress= "text")
names(pvalimg.tab) = names(runlist)
return(pvalimg.tab)
}
atfile = file.path(atlasdir, "All_FSL_Atlas_Labels.Rda")
x = load(file=atfile)
lists = list(mni.list, jhut1.list, jhut2.list)
names(lists) = c("MNI", "EVE_1", "EVE_2")
sublists = list(jhut1.list, jhut2.list)
sublists = lapply(sublists, function(x) {
area = names(x)
x[grep("GLOBUS_PALLIDUS|THALAMUS|PUTAMEN", area)]
})
sublists = lapply(sublists, function(x) {
xx = unlist(x)
area = names(xx)
area = gsub("_left\\d*", "", area)
area = gsub("_right\\d*", "", area)
uarea = unique(area)
x = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx[ind]
})
names(x) = uarea
x
})
col.lists = list(jhut1.list, jhut2.list)
names(col.lists) = c("EVE_1", "EVE_2")
col.lists = lapply(col.lists, function(x) {
area = names(x)
area = gsub("_left", "", area)
area = gsub("_right", "", area)
uarea = unique(area)
res = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx = sort(unlist(x[ind]))
names(xx) = NULL
print(ind)
xx
# xx[ind]
})
names(res) = uarea
res
})
rm(list=x)
area_pct = function(img, ind.list, keepall) {
## get overlap of indices
raw.mat = sapply(ind.list, function(x) sum(img[x]))
any.mat = sapply(ind.list, function(x) mean(img[x] > 0))
mn.mat = sapply(ind.list, function(x) mean(img[x]))
names(raw.mat) = names(ind.list)
## cs is sum of indices of overlap
cs.raw = data.frame(nvox=raw.mat, roi_pct_any = any.mat,
roi_mean_pct = mn.mat)
rownames(cs.raw) = names(ind.list)
if (!keepall) cs.raw = cs.raw[rowSums(cs.raw) != 0, , drop=FALSE]
return(cs.raw)
}
whichdir = "reoriented"
outcome = "GCS"
get.id = function(x){
ss = strsplit(x, "_")
ss = sapply(ss, head, 1)
ss = gsub(".*(\\d\\d\\d-.*)", "\\1", ss)
ss
}
id_to_pname = function(x){
as.numeric(gsub("-", "", x))
}
nkeeps = c(1000, 2000, 3000, .001, 0.01, 0.05)
demog = read.csv(file=file.path(basedir, "Demog_NIHSS_Mask.csv"),
stringsAsFactors=FALSE)
demog$Base_ICH_10 = demog$Diagnostic_ICH /10
demog$Clot_Location_RC = gsub("Palidus", "Pallidus",
demog$Clot_Location_RC )
demog$Clot_Location_RC = factor(demog$Clot_Location_RC,
levels=
c("Lobar", "Globus Pallidus",
"Putamen", "Thalamus"))
demog$LOC = demog$Clot_Location_RC
all.demog = demog
###############################################
# Load and subset matrix
###############################################
outfile = file.path(outdir, "Voxel_Matrix.Rda")
load( file=outfile )
all.mat = mat
all.rs = rs
ncut = 10
ncut = 0.1
mat = all.mat
rs = all.rs
mat = mat[, which(cc), drop=FALSE]
if (ncut < 1){
ncut = floor(nrow(demog) * ncut)
rs = rowSums(mat)
}
dim(mat)
sum(rs > ncut)
mat = mat[rs > ncut, ]
###############################################
# Cross validation folds
###############################################
runmat = t(mat)
class(runmat) = "numeric"
###############################################
# Get Y values
###############################################
runY = demog$Y
mytime = system.time({
mods = fast_lm(runY, X=runmat, Z = NULL,
spot.check = TRUE, ncheck = 100, verbose=FALSE)
})
pvals = lm(runmat ~ runY)
mods$AIC = extractAIC(mods)
img = array(NA, dim= dtemp)
if (outcome == "NIHSS"){
pval = 0.01
ind = mods$p.val <= pval
img[ rs > ncut ][ind] = 1
}
if (outcome == "GCS"){
ord = 1000
ind  = rank(mods$p.val) <= ord
img[ rs > ncut ][ind] = 1
}
img[is.na(img)] = 0
img = niftiarr(temp, img)
img = cal_img(img)
mask.overlay(temp, img)
#################################
# Regressions with % of ROI
# Author: John Muschelli
#################################
rm(list=ls())
library(cttools)
library(scales)
library(RColorBrewer)
library(data.table)
library(ggplot2)
library(grid)
library(plyr)
library(fslr)
homedir = "/Applications"
rootdir = "~/CT_Registration"
basedir = file.path(rootdir, "data")
outdir = basedir
if (Sys.info()[["user"]] %in% "jmuschel") {
homedir = "~"
rootdir = "/dexter/disk2/smart/stroke_ct/ident"
basedir = file.path(rootdir, "Registration")
outdir = file.path(basedir, "results")
}
progdir = file.path(rootdir, "programs")
tempdir = file.path(rootdir, "Template")
atlasdir = file.path(tempdir, "atlases")
lr_symm = function(img){
dimg = dim(img)
max.slice = dimg[1]
mid.slice = (max.slice+1)/2
w = which(img > 0, arr.ind=TRUE)
## 20 - then 160, 90 - 20 + 90
## if 160 then 90 - 160 + 90
w[, 1] = 2 * mid.slice - w[,1]
w = w[ w[, 1] > 0 & w[, 1] < max.slice, ]
img[w] = 1
img = (img > 0)*1
img = newnii(img)
}
# allres = allres
make.pvalimg = function(pvalimg, runlist = lists){
pvalimg.tab = llply(runlist, function(x) {
x = area_pct(pvalimg, ind.list=x, keepall=TRUE)
x$nvox = x$nvox/sum(x$nvox) * 100
x$roi_pct_any = x$roi_pct_any * 100
x$roi_mean_pct = x$roi_mean_pct * 100
x = x[order(x$nvox, decreasing=TRUE), , drop=FALSE]
x$area = rownames(x)
x
}, .progress= "text")
names(pvalimg.tab) = names(runlist)
return(pvalimg.tab)
}
atfile = file.path(atlasdir, "All_FSL_Atlas_Labels.Rda")
x = load(file=atfile)
lists = list(mni.list, jhut1.list, jhut2.list)
names(lists) = c("MNI", "EVE_1", "EVE_2")
sublists = list(jhut1.list, jhut2.list)
sublists = lapply(sublists, function(x) {
area = names(x)
x[grep("GLOBUS_PALLIDUS|THALAMUS|PUTAMEN", area)]
})
sublists = lapply(sublists, function(x) {
xx = unlist(x)
area = names(xx)
area = gsub("_left\\d*", "", area)
area = gsub("_right\\d*", "", area)
uarea = unique(area)
x = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx[ind]
})
names(x) = uarea
x
})
col.lists = list(jhut1.list, jhut2.list)
names(col.lists) = c("EVE_1", "EVE_2")
col.lists = lapply(col.lists, function(x) {
area = names(x)
area = gsub("_left", "", area)
area = gsub("_right", "", area)
uarea = unique(area)
res = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx = sort(unlist(x[ind]))
names(xx) = NULL
print(ind)
xx
# xx[ind]
})
names(res) = uarea
res
})
rm(list=x)
area_pct = function(img, ind.list, keepall) {
## get overlap of indices
raw.mat = sapply(ind.list, function(x) sum(img[x]))
any.mat = sapply(ind.list, function(x) mean(img[x] > 0))
mn.mat = sapply(ind.list, function(x) mean(img[x]))
names(raw.mat) = names(ind.list)
## cs is sum of indices of overlap
cs.raw = data.frame(nvox=raw.mat, roi_pct_any = any.mat,
roi_mean_pct = mn.mat)
rownames(cs.raw) = names(ind.list)
if (!keepall) cs.raw = cs.raw[rowSums(cs.raw) != 0, , drop=FALSE]
return(cs.raw)
}
whichdir = "reoriented"
outcome = "GCS"
get.id = function(x){
ss = strsplit(x, "_")
ss = sapply(ss, head, 1)
ss = gsub(".*(\\d\\d\\d-.*)", "\\1", ss)
ss
}
id_to_pname = function(x){
as.numeric(gsub("-", "", x))
}
nkeeps = c(1000, 2000, 3000, .001, 0.01, 0.05)
demog = read.csv(file=file.path(basedir, "Demog_NIHSS_Mask.csv"),
stringsAsFactors=FALSE)
demog$Base_ICH_10 = demog$Diagnostic_ICH /10
demog$Clot_Location_RC = gsub("Palidus", "Pallidus",
demog$Clot_Location_RC )
demog$Clot_Location_RC = factor(demog$Clot_Location_RC,
levels=
c("Lobar", "Globus Pallidus",
"Putamen", "Thalamus"))
demog$LOC = demog$Clot_Location_RC
all.demog = demog
###############################################
# Load and subset matrix
###############################################
outfile = file.path(outdir, "Voxel_Matrix.Rda")
load( file=outfile )
all.mat = mat
all.rs = rs
ncut = 10
ncut = 0.1
# outcome = "NIHSS"
adder = paste0(outcome, "_")
if (outcome == "NIHSS"){
adder = ""
}
demog = all.demog
if (outcome == "GCS") {
demog$Y = demog$Enrollment_GCS_Add
} else if (outcome == "NIHSS"){
demog$Y = demog$Enrollment_NIHSS_Total
} else {
stop(paste0("Outcome ", outcome, " not implemented"))
}
xdemog = demog
cc = complete.cases(demog$Y) & demog$IVH_Dx_10 == 0
demog = demog[cc,]
zform = ~ Age + Sex + Diagnostic_ICH
# Z = model.matrix(object = zform, data = demog)
# Z = model.matrix(object = zform, data = demog)
template = file.path(tempdir, "scct_unsmooth.nii.gz")
temp = readNIfTI(template)
dtemp = dim(temp)
###############################################
# Subset matrix
###############################################
mat = all.mat
rs = all.rs
mat = mat[, which(cc), drop=FALSE]
if (ncut < 1){
ncut = floor(nrow(demog) * ncut)
rs = rowSums(mat)
}
dim(mat)
sum(rs > ncut)
mat = mat[rs > ncut, ]
runmat = t(mat)
class(runmat) = "numeric"
###############################################
# Get Y values
###############################################
runY = demog$Y
mytime = system.time({
mods = fast_lm(runY, X=runmat, Z = NULL,
spot.check = TRUE, ncheck = 100, verbose=FALSE)
})
pvals = lm(runmat ~ runY)
mods$AIC = extractAIC(mods)
img = array(NA, dim= dtemp)
if (outcome == "NIHSS"){
pval = 0.01
ind = mods$p.val <= pval
img[ rs > ncut ][ind] = 1
}
if (outcome == "GCS"){
ord = 1000
ind  = rank(mods$p.val) <= ord
img[ rs > ncut ][ind] = 1
}
img[is.na(img)] = 0
img = niftiarr(temp, img)
img = cal_img(img)
mask.overlay(temp, img)
symm.img = lr_symm(img)
symm.ind = which(symm.img > 0)
rr = rowMeans(runmat[, ind, drop=FALSE])
demog[, paste0("pct")] = rr
all.rr = colMeans(xmat[symm.ind, , drop=FALSE])
demog
xdemog
xdemog[, paste0("pct")] = all.rr
all.rr = colMeans(all.mat[symm.ind, , drop=FALSE])
xdemog[, paste0("pct")] = all.rr
sub = xdemog[ all.rr == 0, ]
sub
pvalimg.tab = make.pvalimg(img, lists)[["EVE_1"]]
pvalimg.tab = pvalimg.tab[ order(pvalimg.tab$nvox, decreasing = TRUE), ]
pvalimg.tab = pvalimg.tab[ 1:10, ]
col.pvalimg.tab = make.pvalimg(img, col.lists)[["EVE_1"]]
col.pvalimg.tab = col.pvalimg.tab[ order(col.pvalimg.tab$nvox,
decreasing = TRUE), ]
col.pvalimg.tab = col.pvalimg.tab[ 1:10, ]
pvalimg.tab_symm = make.pvalimg(symm.img, lists)[["EVE_1"]]
col.pvalimg.tab_symm = make.pvalimg(symm.img, col.lists)[["EVE_1"]]
pvalimg.tab_symm
pvalimg.tab
col.pvalimg.tab
pvalimg.tab
col.pvalimg.tab
all.equal(col.pvalimg.tab, pvalimg.tab)
col.pvalimg.tab
pvalimg.tab
col.pvalimg.tab
pvalimg.tab
col.pvalimg.tab
pvalimg.tab$nvox
pvalimg.tab$nvox - col.pvalimg.tab$nvox
#################################
# Regressions with % of ROI
# Author: John Muschelli
#################################
rm(list=ls())
library(cttools)
library(scales)
library(RColorBrewer)
library(data.table)
library(ggplot2)
library(grid)
library(plyr)
library(fslr)
homedir = "/Applications"
rootdir = "~/CT_Registration"
basedir = file.path(rootdir, "data")
outdir = basedir
if (Sys.info()[["user"]] %in% "jmuschel") {
homedir = "~"
rootdir = "/dexter/disk2/smart/stroke_ct/ident"
basedir = file.path(rootdir, "Registration")
outdir = file.path(basedir, "results")
}
progdir = file.path(rootdir, "programs")
tempdir = file.path(rootdir, "Template")
atlasdir = file.path(tempdir, "atlases")
lr_symm = function(img){
dimg = dim(img)
max.slice = dimg[1]
mid.slice = (max.slice+1)/2
w = which(img > 0, arr.ind=TRUE)
## 20 - then 160, 90 - 20 + 90
## if 160 then 90 - 160 + 90
w[, 1] = 2 * mid.slice - w[,1]
w = w[ w[, 1] > 0 & w[, 1] < max.slice, ]
img[w] = 1
img = (img > 0)*1
img = newnii(img)
}
# allres = allres
make.pvalimg = function(pvalimg, runlist = lists){
pvalimg.tab = llply(runlist, function(x) {
x = area_pct(pvalimg, ind.list=x, keepall=TRUE)
x$nvox = x$nvox/sum(x$nvox) * 100
x$roi_pct_any = x$roi_pct_any * 100
x$roi_mean_pct = x$roi_mean_pct * 100
x = x[order(x$nvox, decreasing=TRUE), , drop=FALSE]
x$area = rownames(x)
x
}, .progress= "text")
names(pvalimg.tab) = names(runlist)
return(pvalimg.tab)
}
atfile = file.path(atlasdir, "All_FSL_Atlas_Labels.Rda")
x = load(file=atfile)
lists = list(mni.list, jhut1.list, jhut2.list)
names(lists) = c("MNI", "EVE_1", "EVE_2")
sublists = list(jhut1.list, jhut2.list)
sublists = lapply(sublists, function(x) {
area = names(x)
x[grep("GLOBUS_PALLIDUS|THALAMUS|PUTAMEN", area)]
})
sublists = lapply(sublists, function(x) {
xx = unlist(x)
area = names(xx)
area = gsub("_left\\d*", "", area)
area = gsub("_right\\d*", "", area)
uarea = unique(area)
x = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx[ind]
})
names(x) = uarea
x
})
col.lists = list(jhut1.list, jhut2.list)
names(col.lists) = c("EVE_1", "EVE_2")
x = col.lists[[1]]
area = names(x)
area
area = gsub("_left", "", area)
area = gsub("_right", "", area)
area
uarea = unique(area)
area
x
